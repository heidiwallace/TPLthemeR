palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
pal <- unlist(palette(gradient)[1:gradient-1]) #subset to remove white color from the vector
ggplot2::scale_fill_continuous(..., type = pal)
}
some_data %>%
ggplot(aes(treatment, score)) +
geom_point()
some_data %>%
ggplot(aes(treatment, score)) +
geom_point() +
scale_fill_continuous_tpl(color = 'darkblue', gradient = 10)
scale_fill_continuous_tpl <- function(color, gradient, ...){
colors <- tpl_colors()
base <- colors[[color]]
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
pal <- unlist(palette(gradient)[1:gradient-1]) #subset to remove white color from the vector
ggplot2::scale_fill_continuous(..., type = pal)
}
some_data %>%
ggplot(aes(treatment, score)) +
geom_point() +
scale_fill_continuous_tpl(color = 'darkblue', gradient = 10)
v <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile()
v
v + scale_fill_continuous(type = "gradient")
v + scale_fill_continuous_tpl(color = 'darkblue', gradient = 10)
colors <- tpl_colors()
base <- colors[['darkblue']]
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb")
pal <- unlist(palette(11)[1:11-1])
pal
v + scale_fill_continuous(type = pal)
scale_fill_continuous_tpl <- function(color, gradient, ...){
colors <- tpl_colors()
base <- colors[[color]]
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
#pal <- unlist(palette(gradient)[1:gradient-1]) #subset to remove white color from the vector
ggplot2::scale_fill_continuous(..., type = palette(gradient))
}
v + scale_fill_continuous_tpl(color = 'darkblue', gradient = 10)
v <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile()
v
v + scale_fill_continuous_tpl(color = 'darkblue', gradient = 10)
palette(11)
palette(11)
scale_fill_continuous_tpl <- function(color, gradient, ...){
colors <- tpl_colors()
base <- colors[[color]]
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
#pal <- unlist(palette(gradient)[1:gradient-1]) #subset to remove white color from the vector
ggplot2::scale_fill_continuous(..., type = palette(gradient))
}
v + scale_fill_continuous_tpl(color = 'darkblue', gradient = 10)
scale_fill_continuous_tpl <- function(color, ...){
colors <- tpl_colors()
base <- colors[[color]]
#palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
#pal <- unlist(palette(gradient)[1:gradient-1]) #subset to remove white color from the vector
ggplot2::scale_fill_gradient(..., low = "#ffffff", high = base)
}
v + scale_fill_continuous_tpl(color = 'darkblue')
scale_fill_continuous_tpl <- function(color, ...){
colors <- tpl_colors()
base <- colors[[color]]
#palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
#pal <- unlist(palette(gradient)[1:gradient-1]) #subset to remove white color from the vector
ggplot2::scale_fill_gradient(..., low = base, high = "#ffffff")
}
v + scale_fill_continuous_tpl(color = 'darkblue')
scale_fill_continuous_tpl <- function(color, ...){
colors <- tpl_colors()
base <- colors[[color]]
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
pal <- unlist(palette(11)[1:10]) #subset to remove white color from the vector
ggplot2::scale_fill_gradient(..., low = base, high = pal[10])
}
v + scale_fill_continuous_tpl(color = 'darkblue')
scale_fill_continuous_tpl <- function(color, ...){
colors <- tpl_colors()
base <- colors[[color]]
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
pal <- unlist(palette(11)[1:10]) #subset to remove white color from the vector
ggplot2::scale_fill_gradient(..., low = pal[10], high = base)
}
v + scale_fill_continuous_tpl(color = 'darkblue')
devtools::document()
?scale_fill_discrete_tpl
devtools::document()
devtools::document()
?scale_fill_continuous_tpl
devtools::document()
?tpl_colors
devtools::document()
v + scale_fill_continuous_tpl(color = 'darkblue')
v + scale_fill_continuous_tpl(color = 'darkblue', reverse=F)
scale_fill_continuous_tpl <- function(color, reverse=F, ...){
colors <- tpl_colors() #create brand color vector
base <- colors[[color]] #select specified color to use as base for creating color palette
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
pal <- unlist(palette(11)[1:10]) #custom palette, subset to remove white color from the vector
if(reverse){
ggplot2::scale_fill_gradient(..., low = base, high = pal[10])
}else{
ggplot2::scale_fill_gradient(..., low = pal[10], high = base)
}
}
v + scale_fill_continuous_tpl(color = 'darkblue', reverse=F)
v + scale_fill_continuous_tpl(color = 'darkblue', reverse=T)
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, fill = raceethnic)) +
geom_col() +
scale_fill_discrete(type = logo_hex) + #use this with aes(fill = ) to assign hex codes to categories
theme(text = element_text(family = "Verdana", face = "plain")) + #customize font, this seems close to Century Gothic
labs(title = "Here is a sample title")
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, fill = raceethnic)) +
geom_col() +
scale_fill_discrete(type = logo_hex) + #use this with aes(fill = ) to assign hex codes to categories
theme(text = element_text(family = "Verdana", face = "plain")) + #customize font, this seems close to Century Gothic
labs(title = "Here is a sample title")
#create a character vector of hex codes for color scheme, use with categorical data
logo_hex <- c("#233D4D", "#FE7F2D", "#FCCA46", "#A1C181", "#579C87")
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, fill = raceethnic)) +
geom_col() +
scale_fill_discrete(type = logo_hex) + #use this with aes(fill = ) to assign hex codes to categories
theme(text = element_text(family = "Verdana", face = "plain")) + #customize font, this seems close to Century Gothic
labs(title = "Here is a sample title")
#plot continuous palette hues for display
palette_pies <- vector(mode = "list", length = length(palette_hues))
devtools::document()
cols <- tpl_colors()
n_seq <- seq_along(cols)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "Cool palette of drsimonj Inc, with 10 levels")
text(n_seq, 1, cols, col = "white", srt = 90)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "TPL Brand Colors")
cols <- tpl_colors()
n_seq <- seq_along(cols)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "Cool palette of drsimonj Inc, with 10 levels")
text(n_seq, 1, cols, col = "white", srt = 90)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "TPL Brand Colors")
text(n_seq, 1, cols, col = "white", srt = 90)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, cols, col = "white", srt = 90)
usethis::use_vignette("Introduction")
library(TPLthemeR)
library(ggplot2)
library(tidyverse)
mtcars
diamonds
p <-
diamonds %>%
ggplot(aes(cut, price)) +
geom_col()
p
p + theme_tpl()
p <-
diamonds %>%
ggplot(aes(cut, price)) +
geom_col() +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption")
p + theme_tpl()
colors <- tpl_colors()
diamonds %>%
ggplot(aes(cut, price)) +
geom_col(type = colors) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds %>%
ggplot(aes(cut, price)) +
geom_col(option = colors) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds %>%
ggplot(aes(cut, price)) +
geom_col(fill = colors) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds %>%
ggplot(aes(cut, price, fill = cut)) +
geom_col(fill = colors) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
colors <- tpl_colors(named = F)
diamonds %>%
ggplot(aes(cut, price, fill = cut)) +
geom_col(fill = colors) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds %>%
ggplot(aes(cut, price, fill = cut)) +
geom_col() +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
colors <- tpl_colors(named = F)
diamonds %>%
ggplot(aes(cut, price, fill = cut)) +
geom_col(fill = colors) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds %>%
ggplot(aes(cut, price, fill = cut)) +
geom_col() +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
scale_fill_discrete_tpl() +
theme_tpl()
diamonds %>%
ggplot(aes(cut, price, fill = cut)) +
geom_col() +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
scale_fill_discrete_tpl() +
theme_tpl() +
theme(legend.position = "none")
p <-
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile()
p + scale_fill_continuous_tpl('darkblue', reverse = T)
diamonds %>%
ggplot(aes(cut, price)) +
geom_col(fill = colors[['orange']]) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
colors <- tpl_colors()
diamonds %>%
ggplot(aes(cut, price)) +
geom_col(fill = colors[['orange']]) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds
faithfuld
diamonds
g <-
ggplot(diamonds, aes(carat, depth, fill = price)) +
geom_tile()
g + scale_fill_continuous_tpl('darkblue', reverse = T)
g <-
ggplot(diamonds, aes(carat, depth, fill = depth)) +
geom_tile()
g + scale_fill_continuous_tpl('darkblue', reverse = T)
faithfuld
g <-
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile()
g + scale_fill_continuous_tpl('darkblue', reverse = T)
g + scale_fill_continuous_tpl('teal', reverse = T)
diamonds %>%
filter(cut == "Fair" | cut == "Premium") %>%
ggplot(aes(cut, price)) +
geom_col(fill = c(colors[['orange']], colors[['green']])) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
diamonds %>%
filter(cut == "Fair" | cut == "Premium")
diamonds %>%
filter(cut == "Fair" | cut == "Premium") %>%
ggplot(aes(as.character(cut), price)) +
geom_col(fill = c(colors[['orange']], colors[['green']])) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
data <- diamonds %>%
filter(cut == "Fair" | cut == "Premium")
data %>%
ggplot(aes(as.character(cut), price)) +
geom_col(fill = c(colors[['orange']], colors[['green']])) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
data <- diamonds %>%
filter(cut == "Fair" | cut == "Premium") %>%
mutate(as.character(cut))
typeof(data$cut)
data %>%
ggplot(aes(cut, price)) +
geom_col(fill = c(colors[['orange']], colors[['green']])) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
c(colors[['orange']], colors[['green']])
data
data <- diamonds %>%
filter(cut == "Fair" | cut == "Premium") %>%
mutate(cut = as.character(cut))
data %>%
ggplot(aes(cut, price)) +
geom_col(fill = c(colors[['orange']], colors[['green']])) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
data
data %>%
ggplot(aes(cut, price)) +
geom_col() +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
data %>%
ggplot(aes(cut, price)) +
geom_col(fill = c("red", "blue")) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
data %>%
ggplot(aes(cut, price)) +
geom_col() +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
vignette("ggplot2-specs")
diamonds %>%
ggplot(aes(cut, price)) +
geom_col(fill = colors[['orange']]) +
labs(title = "Prices of diamonds by cut",
caption = "Here is a sample caption") +
theme_tpl()
devtools::document()
devtools::install_github("heidiwallace/TPLthemeR")
n_seq
cols
cols
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, names(cols), col = "white", srt = 90)
text(n_seq, 1, cols, col = "white", srt = 90)
cols <- tpl_colors()
n_seq <- seq_along(cols)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, cols, col = "white", srt = 90)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, cols, col = "white", srt = 90)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, names(cols), col = "white", srt = 90)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, names(cols), col = "white", srt = 0)
image(n_seq, 1, as.matrix(n_seq), col = cols,
xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
main = "The People Lab Colors")
text(n_seq, 1, paste(names(cols), cols, sep = "\n"), col = "white", srt = 0)
devtools::install_github("heidiwallace/TPLthemeR")
vignette("TPLthemeR")
g +
theme_tpl_legend_right() +
scale_fill_continuous_tpl('teal', reverse = T)
devtools::install_github("heidiwallace/TPLthemeR")
getwd()
#----environment set up----
library(tidyverse)
library(ggplot2)
#create a character vector of hex codes for color scheme, use with categorical data
logo_hex <- c("#233D4D", "#FE7F2D", "#FCCA46", "#A1C181", "#579C87")
#mock data
some_data <- data.frame(treatment = as.factor(c(1, 0, 1, 0, 0, 1, 1, 0, 1, 0)),
raceethnic = c("Black", "White", "Asian", "Hawaiian/PI", "Latinx", "Black", "White", "White", "Latinx", "Hawaiian/PI"),
score = rnorm(10, 100, 10))
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, fill = raceethnic)) +
geom_col() +
scale_fill_discrete(type = logo_hex) + #use this with aes(fill = ) to assign hex codes to categories
theme(text = element_text(family = "Verdana", face = "plain")) + #customize font, this seems close to Century Gothic
labs(title = "Here is a sample title")
scale_color_discrete_tpl <- function(...){
pal <- tpl_colors(named = F)
ggplot2::scale_color_discrete(..., type = pal)
}
library(TPLthemeR)
scale_color_discrete_tpl <- function(...){
pal <- tpl_colors(named = F)
ggplot2::scale_color_discrete(..., type = pal)
}
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, fill = raceethnic)) +
geom_smooth() +
scale_fill_discrete(type = logo_hex) + #use this with aes(fill = ) to assign hex codes to categories
theme(text = element_text(family = "Verdana", face = "plain")) + #customize font, this seems close to Century Gothic
labs(title = "Here is a sample title")
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, fill = raceethnic)) +
geom_smooth() +
scale_color_discrete_tpl()
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, color = raceethnic)) +
geom_smooth() +
scale_color_discrete_tpl()
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n())
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, color = raceethnic)) +
geom_smooth()
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, color = raceethnic)) +
geom_point() +
scale_color_discrete_tpl()
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, color = raceethnic)) +
geom_point() +
scale_color_discrete_tpl()
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, color = raceethnic)) +
geom_point()
#categorical data - fyi, only having 5 colors in the palette will be a problem if there are >5 groups in the data
some_data %>%
group_by(raceethnic, treatment) %>%
summarise(Count = n()) %>%
ggplot(aes(treatment, Count, color = raceethnic)) +
geom_point() +
scale_color_discrete_tpl()
df <- data.frame(
x = runif(100),
y = runif(100),
z1 = rnorm(100),
z2 = abs(rnorm(100))
)
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_colour_gradient(low = "white", high = "black")
scale_color_continuous_tpl <- function(color, reverse=F, ...){
colors <- tpl_colors() #create brand color vector
base <- colors[[color]] #select specified color to use as base for creating color palette
palette <- colorRampPalette(c(base, "#ffffff") , space = "rgb") #creates a custom function for hues from darkest to white
pal <- unlist(palette(11)[1:10]) #custom palette, subset to remove white color from the vector
if(reverse){
ggplot2::scale_color_gradient(..., low = base, high = pal[10])
}else{
ggplot2::scale_color_gradient(..., low = pal[10], high = base)
}
}
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_color_continuous_tpl(color = 'darkblue')
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_color_continuous_tpl(color = 'darkblue', reverse = T)
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_color_continuous_tpl(color = 'darkblue')
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_color_continuous_tpl(color = 'yellow')
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_color_continuous_tpl(color = 'orange')
ggplot(df, aes(x, y)) +
geom_point(aes(colour = z2)) +
scale_color_continuous_tpl(color = 'orange') +
theme_tpl()
devtools::document()
